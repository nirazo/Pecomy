// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

struct R {
  struct file {
    static let googleServiceInfoPlist = FileResource(bundle: _R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    static let kaitiTtc = FileResource(bundle: _R.hostingBundle, name: "Kaiti", pathExtension: "ttc")
    
    static func googleServiceInfoPlist(_: Void) -> NSURL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle?.URLForResource(fileResource)
    }
    
    static func googleServiceInfoPlist(_: Void) -> String? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle?.pathForResource(fileResource)
    }
    
    static func kaitiTtc(_: Void) -> NSURL? {
      let fileResource = R.file.kaitiTtc
      return fileResource.bundle?.URLForResource(fileResource)
    }
    
    static func kaitiTtc(_: Void) -> String? {
      let fileResource = R.file.kaitiTtc
      return fileResource.bundle?.pathForResource(fileResource)
    }
  }
  
  struct font {
    
  }
  
  struct image {
    static let background_afternoon1 = ImageResource(bundle: _R.hostingBundle, name: "background_afternoon1")
    static let background_afternoon2 = ImageResource(bundle: _R.hostingBundle, name: "background_afternoon2")
    static let background_afternoon3 = ImageResource(bundle: _R.hostingBundle, name: "background_afternoon3")
    static let background_night1 = ImageResource(bundle: _R.hostingBundle, name: "background_night1")
    static let background_night2 = ImageResource(bundle: _R.hostingBundle, name: "background_night2")
    static let background_night3 = ImageResource(bundle: _R.hostingBundle, name: "background_night3")
    static let card_able = ImageResource(bundle: _R.hostingBundle, name: "card_able")
    static let card_disable = ImageResource(bundle: _R.hostingBundle, name: "card_disable")
    static let comment_human = ImageResource(bundle: _R.hostingBundle, name: "comment_human")
    static let dislike_normal = ImageResource(bundle: _R.hostingBundle, name: "dislike_normal")
    static let dislike_tapped = ImageResource(bundle: _R.hostingBundle, name: "dislike_tapped")
    static let drink_cocktail = ImageResource(bundle: _R.hostingBundle, name: "drink_cocktail")
    static let drink_free_drink = ImageResource(bundle: _R.hostingBundle, name: "drink_free_drink")
    static let drink_sake = ImageResource(bundle: _R.hostingBundle, name: "drink_sake")
    static let drink_shochu = ImageResource(bundle: _R.hostingBundle, name: "drink_shochu")
    static let drink_wine = ImageResource(bundle: _R.hostingBundle, name: "drink_wine")
    static let entertainment_darts = ImageResource(bundle: _R.hostingBundle, name: "entertainment_darts")
    static let entertainment_karaoke = ImageResource(bundle: _R.hostingBundle, name: "entertainment_karaoke")
    static let entertainment_live = ImageResource(bundle: _R.hostingBundle, name: "entertainment_live")
    static let entertainment_sports = ImageResource(bundle: _R.hostingBundle, name: "entertainment_sports")
    static let icon = ImageResource(bundle: _R.hostingBundle, name: "icon")
    static let launchImage = ImageResource(bundle: _R.hostingBundle, name: "LaunchImage")
    static let like_normal = ImageResource(bundle: _R.hostingBundle, name: "like_normal")
    static let like_tapped = ImageResource(bundle: _R.hostingBundle, name: "like_tapped")
    static let nogood_highlighted = ImageResource(bundle: _R.hostingBundle, name: "nogood_highlighted")
    static let nogood_normal = ImageResource(bundle: _R.hostingBundle, name: "nogood_normal")
    static let nogood_tapped = ImageResource(bundle: _R.hostingBundle, name: "nogood_tapped")
    static let noimage = ImageResource(bundle: _R.hostingBundle, name: "noimage")
    static let other_barrier_free = ImageResource(bundle: _R.hostingBundle, name: "other_barrier_free")
    static let particularity_fish = ImageResource(bundle: _R.hostingBundle, name: "particularity_fish")
    static let particularity_healty = ImageResource(bundle: _R.hostingBundle, name: "particularity_healty")
    static let particularity_vegetable = ImageResource(bundle: _R.hostingBundle, name: "particularity_vegetable")
    static let rank_first = ImageResource(bundle: _R.hostingBundle, name: "rank_first")
    static let rank_other = ImageResource(bundle: _R.hostingBundle, name: "rank_other")
    static let seat_counter = ImageResource(bundle: _R.hostingBundle, name: "seat_counter")
    static let seat_couple_seat = ImageResource(bundle: _R.hostingBundle, name: "seat_couple_seat")
    static let seat_horigotatsu = ImageResource(bundle: _R.hostingBundle, name: "seat_horigotatsu")
    static let seat_private_room = ImageResource(bundle: _R.hostingBundle, name: "seat_private_room")
    static let seat_raised_tatami = ImageResource(bundle: _R.hostingBundle, name: "seat_raised_tatami")
    static let seat_sofa = ImageResource(bundle: _R.hostingBundle, name: "seat_sofa")
    static let seat_table = ImageResource(bundle: _R.hostingBundle, name: "seat_table")
    static let seat_tatami_room = ImageResource(bundle: _R.hostingBundle, name: "seat_tatami_room")
    static let seat_terrace = ImageResource(bundle: _R.hostingBundle, name: "seat_terrace")
    static let seat_wide_seat = ImageResource(bundle: _R.hostingBundle, name: "seat_wide_seat")
    static let smoking_able = ImageResource(bundle: _R.hostingBundle, name: "smoking_able")
    static let smoking_disable = ImageResource(bundle: _R.hostingBundle, name: "smoking_disable")
    static let smoking_separated = ImageResource(bundle: _R.hostingBundle, name: "smoking_separated")
    static let space_beautiful_view = ImageResource(bundle: _R.hostingBundle, name: "space_beautiful_view")
    static let space_calm = ImageResource(bundle: _R.hostingBundle, name: "space_calm")
    static let space_hiding = ImageResource(bundle: _R.hostingBundle, name: "space_hiding")
    static let space_hotel = ImageResource(bundle: _R.hostingBundle, name: "space_hotel")
    static let space_ocean_view = ImageResource(bundle: _R.hostingBundle, name: "space_ocean_view")
    static let space_solitary_house = ImageResource(bundle: _R.hostingBundle, name: "space_solitary_house")
    static let space_stylish = ImageResource(bundle: _R.hostingBundle, name: "space_stylish")
    static let style_standing_drink = ImageResource(bundle: _R.hostingBundle, name: "style_standing_drink")
    static let style_standing_eat = ImageResource(bundle: _R.hostingBundle, name: "style_standing_eat")
    static let telephone = ImageResource(bundle: _R.hostingBundle, name: "telephone")
    static let tutorial_01 = ImageResource(bundle: _R.hostingBundle, name: "tutorial_01")
    static let tutorial_02 = ImageResource(bundle: _R.hostingBundle, name: "tutorial_02")
    static let tutorial_03 = ImageResource(bundle: _R.hostingBundle, name: "tutorial_03")
    static let tutorial_04 = ImageResource(bundle: _R.hostingBundle, name: "tutorial_04")
    static let tutorial_05 = ImageResource(bundle: _R.hostingBundle, name: "tutorial_05")
    static let tutorial_06 = ImageResource(bundle: _R.hostingBundle, name: "tutorial_06")
    
    static func background_afternoon1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.background_afternoon1, compatibleWithTraitCollection: traitCollection)
    }
    
    static func background_afternoon2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.background_afternoon2, compatibleWithTraitCollection: traitCollection)
    }
    
    static func background_afternoon3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.background_afternoon3, compatibleWithTraitCollection: traitCollection)
    }
    
    static func background_night1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.background_night1, compatibleWithTraitCollection: traitCollection)
    }
    
    static func background_night2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.background_night2, compatibleWithTraitCollection: traitCollection)
    }
    
    static func background_night3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.background_night3, compatibleWithTraitCollection: traitCollection)
    }
    
    static func card_able(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.card_able, compatibleWithTraitCollection: traitCollection)
    }
    
    static func card_disable(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.card_disable, compatibleWithTraitCollection: traitCollection)
    }
    
    static func comment_human(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.comment_human, compatibleWithTraitCollection: traitCollection)
    }
    
    static func dislike_normal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dislike_normal, compatibleWithTraitCollection: traitCollection)
    }
    
    static func dislike_tapped(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dislike_tapped, compatibleWithTraitCollection: traitCollection)
    }
    
    static func drink_cocktail(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.drink_cocktail, compatibleWithTraitCollection: traitCollection)
    }
    
    static func drink_free_drink(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.drink_free_drink, compatibleWithTraitCollection: traitCollection)
    }
    
    static func drink_sake(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.drink_sake, compatibleWithTraitCollection: traitCollection)
    }
    
    static func drink_shochu(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.drink_shochu, compatibleWithTraitCollection: traitCollection)
    }
    
    static func drink_wine(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.drink_wine, compatibleWithTraitCollection: traitCollection)
    }
    
    static func entertainment_darts(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.entertainment_darts, compatibleWithTraitCollection: traitCollection)
    }
    
    static func entertainment_karaoke(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.entertainment_karaoke, compatibleWithTraitCollection: traitCollection)
    }
    
    static func entertainment_live(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.entertainment_live, compatibleWithTraitCollection: traitCollection)
    }
    
    static func entertainment_sports(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.entertainment_sports, compatibleWithTraitCollection: traitCollection)
    }
    
    static func icon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.icon, compatibleWithTraitCollection: traitCollection)
    }
    
    static func launchImage(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.launchImage, compatibleWithTraitCollection: traitCollection)
    }
    
    static func like_normal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.like_normal, compatibleWithTraitCollection: traitCollection)
    }
    
    static func like_tapped(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.like_tapped, compatibleWithTraitCollection: traitCollection)
    }
    
    static func nogood_highlighted(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.nogood_highlighted, compatibleWithTraitCollection: traitCollection)
    }
    
    static func nogood_normal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.nogood_normal, compatibleWithTraitCollection: traitCollection)
    }
    
    static func nogood_tapped(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.nogood_tapped, compatibleWithTraitCollection: traitCollection)
    }
    
    static func noimage(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.noimage, compatibleWithTraitCollection: traitCollection)
    }
    
    static func other_barrier_free(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.other_barrier_free, compatibleWithTraitCollection: traitCollection)
    }
    
    static func particularity_fish(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.particularity_fish, compatibleWithTraitCollection: traitCollection)
    }
    
    static func particularity_healty(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.particularity_healty, compatibleWithTraitCollection: traitCollection)
    }
    
    static func particularity_vegetable(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.particularity_vegetable, compatibleWithTraitCollection: traitCollection)
    }
    
    static func rank_first(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.rank_first, compatibleWithTraitCollection: traitCollection)
    }
    
    static func rank_other(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.rank_other, compatibleWithTraitCollection: traitCollection)
    }
    
    static func seat_counter(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.seat_counter, compatibleWithTraitCollection: traitCollection)
    }
    
    static func seat_couple_seat(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.seat_couple_seat, compatibleWithTraitCollection: traitCollection)
    }
    
    static func seat_horigotatsu(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.seat_horigotatsu, compatibleWithTraitCollection: traitCollection)
    }
    
    static func seat_private_room(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.seat_private_room, compatibleWithTraitCollection: traitCollection)
    }
    
    static func seat_raised_tatami(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.seat_raised_tatami, compatibleWithTraitCollection: traitCollection)
    }
    
    static func seat_sofa(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.seat_sofa, compatibleWithTraitCollection: traitCollection)
    }
    
    static func seat_table(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.seat_table, compatibleWithTraitCollection: traitCollection)
    }
    
    static func seat_tatami_room(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.seat_tatami_room, compatibleWithTraitCollection: traitCollection)
    }
    
    static func seat_terrace(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.seat_terrace, compatibleWithTraitCollection: traitCollection)
    }
    
    static func seat_wide_seat(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.seat_wide_seat, compatibleWithTraitCollection: traitCollection)
    }
    
    static func smoking_able(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.smoking_able, compatibleWithTraitCollection: traitCollection)
    }
    
    static func smoking_disable(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.smoking_disable, compatibleWithTraitCollection: traitCollection)
    }
    
    static func smoking_separated(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.smoking_separated, compatibleWithTraitCollection: traitCollection)
    }
    
    static func space_beautiful_view(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.space_beautiful_view, compatibleWithTraitCollection: traitCollection)
    }
    
    static func space_calm(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.space_calm, compatibleWithTraitCollection: traitCollection)
    }
    
    static func space_hiding(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.space_hiding, compatibleWithTraitCollection: traitCollection)
    }
    
    static func space_hotel(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.space_hotel, compatibleWithTraitCollection: traitCollection)
    }
    
    static func space_ocean_view(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.space_ocean_view, compatibleWithTraitCollection: traitCollection)
    }
    
    static func space_solitary_house(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.space_solitary_house, compatibleWithTraitCollection: traitCollection)
    }
    
    static func space_stylish(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.space_stylish, compatibleWithTraitCollection: traitCollection)
    }
    
    static func style_standing_drink(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.style_standing_drink, compatibleWithTraitCollection: traitCollection)
    }
    
    static func style_standing_eat(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.style_standing_eat, compatibleWithTraitCollection: traitCollection)
    }
    
    static func telephone(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.telephone, compatibleWithTraitCollection: traitCollection)
    }
    
    static func tutorial_01(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tutorial_01, compatibleWithTraitCollection: traitCollection)
    }
    
    static func tutorial_02(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tutorial_02, compatibleWithTraitCollection: traitCollection)
    }
    
    static func tutorial_03(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tutorial_03, compatibleWithTraitCollection: traitCollection)
    }
    
    static func tutorial_04(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tutorial_04, compatibleWithTraitCollection: traitCollection)
    }
    
    static func tutorial_05(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tutorial_05, compatibleWithTraitCollection: traitCollection)
    }
    
    static func tutorial_06(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tutorial_06, compatibleWithTraitCollection: traitCollection)
    }
  }
  
  struct nib {
    static let launchScreen = _R.nib._LaunchScreen()
    static let restaurantDetailView = _R.nib._RestaurantDetailView()
    static let topResultCard = _R.nib._TopResultCard()
    
    static func launchScreen(_: Void) -> UINib {
      return UINib(resource: R.nib.launchScreen)
    }
    
    static func restaurantDetailView(_: Void) -> UINib {
      return UINib(resource: R.nib.restaurantDetailView)
    }
    
    static func topResultCard(_: Void) -> UINib {
      return UINib(resource: R.nib.topResultCard)
    }
  }
  
  struct reuseIdentifier {
    
  }
  
  struct segue {
    
  }
  
  struct storyboard {
    
  }
}

struct _R {
  static let hostingBundle = NSBundle(identifier: "me.karuta.Karuta")
  
  struct nib {
    struct _LaunchScreen: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "Launch Screen"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
    }
    
    struct _RestaurantDetailView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "RestaurantDetailView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RestaurantDetailView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? RestaurantDetailView
      }
    }
    
    struct _TopResultCard: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "TopResultCard"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TopResultCard? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TopResultCard
      }
    }
  }
  
  struct storyboard {
    
  }
}